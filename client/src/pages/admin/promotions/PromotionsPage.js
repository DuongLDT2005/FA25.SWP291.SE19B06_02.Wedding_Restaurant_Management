import React, { useState } from "react";
import {
  CCard,
  CCardBody,
  CCardHeader,
  CTable,
  CTableHead,
  CTableRow,
  CTableHeaderCell,
  CTableBody,
  CTableDataCell,
  CButton,
  CForm,
  CFormInput,
  CFormSelect,
  CRow,
  CCol,
  CToaster,
  CToast,
  CToastHeader,
  CToastBody,
} from "@coreui/react";

const PromotionsPage = () => {
  const [promotions, setPromotions] = useState([
    {
      id: 1,
      code: "WEDDING20",
      name: "Gi·∫£m 20% ti·ªác c∆∞·ªõi",
      description: "√Åp d·ª•ng cho t·∫•t c·∫£ c√°c nh√† h√†ng trong th√°ng 10",
      discount: 20,
      startDate: "2025-10-01",
      endDate: "2025-10-31",
      status: "Active",
    },
    {
      id: 2,
      code: "HAPPYHOUR",
      name: "Gi·ªù v√†ng gi·∫£m 10%",
      description: "T·ª´ 14h - 17h h√†ng ng√†y",
      discount: 10,
      startDate: "2025-09-15",
      endDate: "2025-12-31",
      status: "Inactive",
    },
  ]);

  const [newPromotion, setNewPromotion] = useState({
    code: "",
    name: "",
    description: "",
    discount: "",
    startDate: "",
    endDate: "",
  });

  const [toast, setToast] = useState(null);

  const showToast = (message, color = "success") => {
    setToast(
      <CToast color={color} autohide visible>
        <CToastHeader closeButton>System</CToastHeader>
        <CToastBody>{message}</CToastBody>
      </CToast>
    );
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewPromotion((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddPromotion = (e) => {
    e.preventDefault();
    if (!newPromotion.code || !newPromotion.name || !newPromotion.discount) {
      showToast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin", "danger");
      return;
    }

    const newItem = {
      id: promotions.length + 1,
      ...newPromotion,
      discount: Number(newPromotion.discount),
      status: "Active",
    };

    setPromotions((prev) => [...prev, newItem]);
    setNewPromotion({
      code: "",
      name: "",
      description: "",
      discount: "",
      startDate: "",
      endDate: "",
    });
    showToast(`Th√™m khuy·∫øn m√£i "${newItem.name}" th√†nh c√¥ng`);
  };

  const handleStatusChange = (id, newStatus) => {
    setPromotions((prev) =>
      prev.map((p) => (p.id === id ? { ...p, status: newStatus } : p))
    );
    showToast(`C·∫≠p nh·∫≠t tr·∫°ng th√°i promotion #${id} th√†nh "${newStatus}"`);
  };

  const handleDelete = (id) => {
    setPromotions((prev) => prev.filter((p) => p.id !== id));
    showToast(`X√≥a promotion #${id}`, "danger");
  };

  // üü° H√†m format ng√†y t·ª´ yyyy-mm-dd ‚Üí dd/mm/yyyy
  const formatDate = (dateString) => {
    if (!dateString) return "";
    const [year, month, day] = dateString.split("-");
    return `${day}/${month}/${year}`;
  };

  return (
    <>
      <CToaster placement="top-end">{toast}</CToaster>

      {/* Form th√™m khuy·∫øn m√£i */}
      <CCard className="mb-4">
        <CCardHeader>
          <strong>Th√™m ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i</strong>
        </CCardHeader>
        <CCardBody>
          <CForm onSubmit={handleAddPromotion}>
            <CRow className="g-3">
              <CCol md={2}>
                <CFormInput
                  name="code"
                  label="M√£ khuy·∫øn m√£i"
                  value={newPromotion.code}
                  onChange={handleInputChange}
                  placeholder="VD: SUMMER50"
                />
              </CCol>
              <CCol md={3}>
                <CFormInput
                  name="name"
                  label="T√™n ch∆∞∆°ng tr√¨nh"
                  value={newPromotion.name}
                  onChange={handleInputChange}
                  placeholder="VD: Gi·∫£m m√πa h√®"
                />
              </CCol>
              <CCol md={2}>
                <CFormInput
                  type="number"
                  name="discount"
                  label="Gi·∫£m (%)"
                  value={newPromotion.discount}
                  onChange={handleInputChange}
                  placeholder="20"
                />
              </CCol>
              <CCol md={2}>
                <CFormInput
                  type="date"
                  name="startDate"
                  label="B·∫Øt ƒë·∫ßu"
                  value={newPromotion.startDate}
                  onChange={handleInputChange}
                />
              </CCol>
              <CCol md={2}>
                <CFormInput
                  type="date"
                  name="endDate"
                  label="K·∫øt th√∫c"
                  value={newPromotion.endDate}
                  onChange={handleInputChange}
                />
              </CCol>
              <CCol md={1} className="d-flex align-items-end">
                <CButton color="primary" type="submit">
                  Th√™m
                </CButton>
              </CCol>
            </CRow>
          </CForm>
        </CCardBody>
      </CCard>

      {/* Danh s√°ch khuy·∫øn m√£i */}
      <CCard>
        <CCardHeader>
          <strong>Danh s√°ch khuy·∫øn m√£i</strong>
        </CCardHeader>
        <CCardBody>
          <CTable hover responsive>
            <CTableHead>
              <CTableRow>
                <CTableHeaderCell>#</CTableHeaderCell>
                <CTableHeaderCell>M√£</CTableHeaderCell>
                <CTableHeaderCell>T√™n ch∆∞∆°ng tr√¨nh</CTableHeaderCell>
                <CTableHeaderCell>Gi·∫£m (%)</CTableHeaderCell>
                <CTableHeaderCell>Th·ªùi gian</CTableHeaderCell>
                <CTableHeaderCell>Tr·∫°ng th√°i</CTableHeaderCell>
                <CTableHeaderCell>H√†nh ƒë·ªông</CTableHeaderCell>
              </CTableRow>
            </CTableHead>
            <CTableBody>
              {promotions.map((p) => (
                <CTableRow key={p.id}>
                  <CTableHeaderCell>{p.id}</CTableHeaderCell>
                  <CTableDataCell>{p.code}</CTableDataCell>
                  <CTableDataCell>
                    <div>
                      <strong>{p.name}</strong>
                      <div style={{ fontSize: "0.85em", color: "#666" }}>{p.description}</div>
                    </div>
                  </CTableDataCell>
                  <CTableDataCell>{p.discount}%</CTableDataCell>
                  <CTableDataCell>
                    {formatDate(p.startDate)} ‚Üí {formatDate(p.endDate)}
                  </CTableDataCell>
                  <CTableDataCell>
                    <CFormSelect
                      size="sm"
                      value={p.status}
                      onChange={(e) => handleStatusChange(p.id, e.target.value)}
                    >
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                    </CFormSelect>
                  </CTableDataCell>
                  <CTableDataCell>
                    <CButton
                      color="danger"
                      size="sm"
                      variant="outline"
                      onClick={() => handleDelete(p.id)}
                    >
                      X√≥a
                    </CButton>
                  </CTableDataCell>
                </CTableRow>
              ))}
            </CTableBody>
          </CTable>
        </CCardBody>
      </CCard>
    </>
  );
};

export default PromotionsPage;
